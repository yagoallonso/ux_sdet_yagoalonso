import os from 'node:os';
import fs from 'node:fs';
import fsp from 'node:fs/promises';
import path from 'node:path';
import { spawn } from 'node:child_process';
import WdioReporter from '@wdio/reporter';
import { browser } from '@wdio/globals';
import { path as path$1 } from '@ffmpeg-installer/ffmpeg';
import { glob } from 'glob';
import logger from '@wdio/logger';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const log$1 = logger('wdio-video-reporter:allure');
class AllureReporterExtension {
    constructor() {
        this.reporterAPI = import('@wdio/allure-reporter').catch(() => {
            log$1.info('Allure reporter not found, not attaching video');
        });
    }
    async addAttachment(...args) {
        const reporter = await this.reporterAPI;
        if (reporter) {
            reporter.addAttachment(...args);
        }
    }
    async addArgument(...args) {
        const reporter = await this.reporterAPI;
        if (reporter) {
            reporter.addArgument(...args);
        }
    }
}

const SCREENSHOT_PADDING_WITH = 4;
const FRAME_REGEX = new RegExp(`^.*\\/(\\d{${SCREENSHOT_PADDING_WITH}})\\.png`);
const SUPPORTED_VIDEO_FORMATS = {
    mp4: {
        fileExtension: 'mp4',
        contentType: 'video/mp4',
        vcodec: 'libx264',
    },
    webm: {
        fileExtension: 'webm',
        contentType: 'video/webm',
        vcodec: 'libvpx-vp9',
    },
    default: {
        fileExtension: 'mp4',
        contentType: 'video/mp4',
        vcodec: 'libx264',
    }
};
const DEFAULT_OPTIONS = {
    videoRenderTimeout: 5000,
    rawPath: '.video-reporter-screenshots',
    saveAllVideos: false,
    videoSlowdownMultiplier: 3,
    videoScale: '1200:trunc(ow/a/2)*2',
    maxTestNameCharacters: 250,
    videoFormat: 'webm',
    excludedActions: [],
    snapshotCommands: [
        'url',
        'forward',
        'back',
        'refresh',
        'execute',
        'sync',
        'size',
        'position',
        'maximize',
        'click',
        'submit',
        'value',
        'keys',
        'clear',
        'selected',
        'enabled',
        'displayed',
        'orientation',
        'alert_text',
        'accept_alert',
        'dismiss_alert',
        'moveto',
        'buttondown',
        'buttonup',
        'doubleclick',
        'down',
        'up',
        'move',
        'scroll',
        'doubleclick',
        'longclick',
        'flick',
        'location',
        'actions'
    ],
    recordAllActions: false,
    onlyRecordLastFailure: false,
    screenshotIntervalSecs: 0,
};
const TO_LOCAL_STRING_OPTIONS = {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false,
};

const log = logger('wdio-video-reporter:helpers');
function sleep(ms) {
    Atomics.wait(new Int32Array(new SharedArrayBuffer(1024)), 0, 0, ms);
}
function generateFilename(maxTestNameCharacters, browserName, fullName) {
    const date = new Date();
    const msec = ('000' + date.getMilliseconds()).slice(-3);
    const timestamp = date.toLocaleString('iso', TO_LOCAL_STRING_OPTIONS)
        .replace(/[ ]/g, '--')
        .replace(/:|\//g, '-') + `-${msec}`;
    let filename = 'video-';
    if (process.env.WDIO_WORKER_ID) {
        filename += `${process.env.WDIO_WORKER_ID}-`;
    }
    filename += encodeURIComponent(`${fullName.replace(/\s+/g, '-')}--${browserName}--${timestamp}`)
        .replace(/%../g, '')
        .replace(/\./g, '-')
        .replace(/[/\\?%*:'|"<>()]/g, '');
    if (filename.length > maxTestNameCharacters) {
        const truncLength = (maxTestNameCharacters - 2) / 2;
        filename = filename.slice(0, truncLength) + '--' + filename.slice(-truncLength);
    }
    return filename;
}
function getVideoPath(outputDir, testName, ext) {
    return path.resolve(outputDir, `${testName}.${ext}`);
}
function getVideoFormatSettings(videoFormat) {
    return SUPPORTED_VIDEO_FORMATS[videoFormat];
}
function waitForVideosToExist(videos, abortTime, sleepFn = sleep) {
    const waitTime = 100;
    const allExist = videos
        .map(v => fs.existsSync(v))
        .every(Boolean);
    let allGenerated = false;
    if (allExist) {
        allGenerated = videos
            .map(v => fs.statSync(v).size)
            .reduce((acc, cur) => acc && cur > 48, true);
    }
    if (allGenerated) {
        return true;
    }
    if (abortTime <= 0 && (!allExist || !allGenerated)) {
        log.debug('abortTime exceeded while waiting for videos to exist.\n');
        return false;
    }
    sleepFn(waitTime);
    return waitForVideosToExist(videos, abortTime - waitTime, sleepFn);
}
function waitForVideosToBeWritten(videos, abortTime, sleepFn = sleep) {
    const start = Date.now();
    let currentSizes = videos.reduce((fileMap, filename) => {
        fileMap[filename] = fs.statSync(filename).size;
        return fileMap;
    }, {});
    while ((Date.now() - start) <= abortTime) {
        sleepFn(100);
        const updatedSizes = videos.reduce((fileMap, filename) => {
            fileMap[filename] = fs.statSync(filename).size;
            return fileMap;
        }, {});
        const hasChanged = Object.entries(currentSizes)
            .every(([filename, size]) => size !== updatedSizes[filename]);
        if (!hasChanged) {
            return true;
        }
        currentSizes = updatedSizes;
    }
    log.debug('abortTime exceeded while waiting for videos to be written.\n');
    return false;
}
function getCurrentCapabilities(browser) {
    const mrCaps = browser.capabilities;
    const w3cCaps = browser.capabilities;
    const currentCapabilities = browser.isMultiremote
        ? mrCaps[Object.keys(browser.capabilities)[0]].capabilities
        : w3cCaps.alwaysMatch || browser.capabilities;
    return currentCapabilities;
}
function pad(frameNumber) {
    return frameNumber.toString().padStart(SCREENSHOT_PADDING_WITH, '0');
}

var notAvailableImage = '';

var _VideoReporter_instances, _VideoReporter_outputDir, _VideoReporter_isDone, _VideoReporter_usingAllure, _VideoReporter_allureOutputDir, _VideoReporter_allureReporter, _VideoReporter_record, _VideoReporter_defaultOutputDir, _VideoReporter_extendAllureReport, _VideoReporter_setRecordingPath, _VideoReporter_log;
class VideoReporter extends WdioReporter {
    constructor(options) {
        super(options);
        _VideoReporter_instances.add(this);
        _VideoReporter_outputDir.set(this, os.tmpdir());
        _VideoReporter_isDone.set(this, false);
        _VideoReporter_usingAllure.set(this, false);
        _VideoReporter_allureOutputDir.set(this, void 0);
        _VideoReporter_allureReporter.set(this, new AllureReporterExtension());
        _VideoReporter_record.set(this, true);
        _VideoReporter_defaultOutputDir.set(this, '_results_');
        this.screenshotPromises = [];
        this.videos = [];
        this.videoPromises = [];
        this.frameNr = 0;
        this.allureVideos = [];
        this.testNameStructure = [];
        this.isCucumberFramework = false;
        this.options = Object.assign({}, DEFAULT_OPTIONS, options);
        if (this.options.screenshotIntervalSecs) {
            this.options.screenshotIntervalSecs = Math.max(this.options.screenshotIntervalSecs, 0.5);
        }
    }
    get isSynchronised() {
        return __classPrivateFieldGet(this, _VideoReporter_isDone, "f");
    }
    get outputDir() { return __classPrivateFieldGet(this, _VideoReporter_outputDir, "f"); }
    get allureOutputDir() { return __classPrivateFieldGet(this, _VideoReporter_allureOutputDir, "f"); }
    get record() { return __classPrivateFieldGet(this, _VideoReporter_record, "f"); }
    set record(value) { __classPrivateFieldSet(this, _VideoReporter_record, value, "f"); }
    onRunnerStart(runner) {
        if (this.options.onlyRecordLastFailure && runner.retry !== runner.config.specFileRetries) {
            __classPrivateFieldSet(this, _VideoReporter_record, false, "f");
            return;
        }
        __classPrivateFieldSet(this, _VideoReporter_outputDir, this.options.outputDir ?? runner.config.outputDir, "f");
        __classPrivateFieldSet(this, _VideoReporter_outputDir, __classPrivateFieldGet(this, _VideoReporter_outputDir, "f") ?? __classPrivateFieldGet(this, _VideoReporter_defaultOutputDir, "f"), "f");
        const sessionId = runner.isMultiremote
            ? Object.entries(runner.capabilities).map(([, caps]) => caps.sessionId)[0]
            : runner.sessionId;
        if (!sessionId) {
            return;
        }
        const runnerInstance = runner.instanceOptions[sessionId];
        if (!runnerInstance) {
            return;
        }
        this.isCucumberFramework = runnerInstance.framework === 'cucumber';
        const allureConfig = runnerInstance.reporters?.find(r => r === 'allure' || r[0] === 'allure');
        if (allureConfig && allureConfig[1] && allureConfig[1].outputDir) {
            __classPrivateFieldSet(this, _VideoReporter_allureOutputDir, path.resolve(allureConfig[1].outputDir), "f");
        }
        __classPrivateFieldSet(this, _VideoReporter_usingAllure, Boolean(allureConfig), "f");
        if (__classPrivateFieldGet(this, _VideoReporter_usingAllure, "f")) {
            process.on('exit', () => this.onExit.call(this));
        }
    }
    onBeforeCommand() {
        if (!__classPrivateFieldGet(this, _VideoReporter_usingAllure, "f") || !this.testName || !__classPrivateFieldGet(this, _VideoReporter_record, "f")) {
            return;
        }
        const formatSettings = getVideoFormatSettings(this.options.videoFormat);
        const videoPath = getVideoPath(__classPrivateFieldGet(this, _VideoReporter_outputDir, "f"), this.testName, formatSettings.fileExtension);
        if (!this.allureVideos.includes(videoPath)) {
            this.allureVideos.push(videoPath);
            __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `Adding execution video attachment as ${videoPath}`);
            __classPrivateFieldGet(this, _VideoReporter_allureReporter, "f").addAttachment('Execution video', videoPath, formatSettings.contentType);
        }
    }
    onAfterCommand(commandArgs) {
        if (!__classPrivateFieldGet(this, _VideoReporter_record, "f")) {
            return;
        }
        const command = commandArgs.endpoint && commandArgs.endpoint.match(/[^/]+$/);
        const commandName = command ? command[0] : 'undefined';
        if ((!this.options.recordAllActions &&
            (this.options.excludedActions.includes(commandName) ||
                !this.options.snapshotCommands.includes(commandName))) ||
            !this.recordingPath) {
            return false;
        }
        __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `Add frame for command: ${commandArgs.endpoint} => [${commandName}]`);
        return this.addFrame();
    }
    onSuiteStart(suite) {
        if (!__classPrivateFieldGet(this, _VideoReporter_record, "f")) {
            return;
        }
        if (this.isCucumberFramework) {
            this.testNameStructure.push(suite.title.replace(/ /g, '-').replace(/-{2,}/g, '-'));
        }
        if (suite.type === 'scenario') {
            __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_setRecordingPath).call(this);
        }
    }
    onSuiteEnd(suite) {
        if (!__classPrivateFieldGet(this, _VideoReporter_record, "f")) {
            return;
        }
        __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_extendAllureReport).call(this);
        if (!this.testName) {
            return;
        }
        this.testNameStructure.pop();
        const hasFailedTests = suite.tests.filter(test => test.state === 'failed').length > 0;
        const allTestsPassed = suite.tests.filter(test => test.state === 'failed').length === 0;
        if (hasFailedTests || (allTestsPassed && this.options.saveAllVideos)) {
            this.addFrame();
        }
    }
    onTestStart(suite) {
        if (!__classPrivateFieldGet(this, _VideoReporter_record, "f")) {
            return;
        }
        if (!this.isCucumberFramework) {
            this.testNameStructure.push(suite.title.replace(/ /g, '-').replace(/-{2,}/g, '-'));
        }
        __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_setRecordingPath).call(this);
        if (this.options.screenshotIntervalSecs) {
            const instance = this;
            this.intervalScreenshot = setInterval(() => instance.addFrame(), this.options.screenshotIntervalSecs * 1000);
        }
    }
    onTestSkip() {
        if (!__classPrivateFieldGet(this, _VideoReporter_record, "f")) {
            return;
        }
        this.clearScreenshotInterval();
    }
    onTestEnd(test) {
        if (!__classPrivateFieldGet(this, _VideoReporter_record, "f")) {
            return;
        }
        this.clearScreenshotInterval();
        this.testNameStructure.pop();
        __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_extendAllureReport).call(this);
        if (test.state === 'failed' || (test.state === 'passed' && this.options.saveAllVideos)) {
            this.addFrame();
            this.generateVideo();
        }
    }
    onRunnerEnd() {
        if (!__classPrivateFieldGet(this, _VideoReporter_record, "f")) {
            return;
        }
        const abortTimer = setTimeout(() => {
            __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, 'videoRenderTimeout triggered before ffmpeg had a chance to wrap up');
            wrapItUp();
        }, this.options.videoRenderTimeout);
        const wrapItUp = () => {
            clearTimeout(abortTimer);
            if (__classPrivateFieldGet(this, _VideoReporter_isDone, "f")) {
                return;
            }
            __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `Generated ${this.videos.length} videos, video report done!`);
            __classPrivateFieldSet(this, _VideoReporter_isDone, true, "f");
        };
        Promise.all(this.videoPromises)
            .then(wrapItUp)
            .catch((error) => {
            __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `onRunnerEnd promise resolution caught ${error}\n`);
            wrapItUp();
        });
    }
    onExit() {
        const allureOutputDir = __classPrivateFieldGet(this, _VideoReporter_allureOutputDir, "f");
        if (!allureOutputDir) {
            return;
        }
        const abortTime = this.options.videoRenderTimeout;
        const startTime = new Date().getTime();
        waitForVideosToExist(this.videos, abortTime);
        waitForVideosToBeWritten(this.videos, abortTime);
        if (new Date().getTime() - startTime > abortTime) {
            console.log('videoRenderTimeout triggered, not all videos finished writing to disk before patching Allure');
        }
        const video = getVideoFormatSettings(this.options.videoFormat);
        fs
            .readdirSync(allureOutputDir)
            .filter(line => line.endsWith(video.fileExtension))
            .map(filename => path.resolve(allureOutputDir, filename))
            .filter(allureFile => fs.statSync(allureFile).size < 1024)
            .filter(allureFile => this.videos.includes(fs.readFileSync(allureFile).toString()))
            .forEach((filePath) => {
            const videoFilePath = fs.readFileSync(filePath).toString();
            if (fs.existsSync(videoFilePath)) {
                fs.copyFileSync(videoFilePath, filePath);
            }
        });
    }
    addFrame() {
        if (!this.recordingPath) {
            return false;
        }
        const frame = this.frameNr++;
        const filePath = path.resolve(this.recordingPath, frame.toString().padStart(SCREENSHOT_PADDING_WITH, '0') + '.png');
        this.screenshotPromises.push(browser.saveScreenshot(filePath)
            .then(() => __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `- Screenshot (frame: ${frame})`))
            .catch((error) => {
            fs.writeFileSync(filePath, notAvailableImage, 'base64');
            __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `Screenshot not available (frame: ${frame}). Error: ${error}..`);
        }));
    }
    clearScreenshotInterval() {
        if (this.intervalScreenshot) {
            clearInterval(this.intervalScreenshot);
            this.intervalScreenshot = undefined;
        }
    }
    generateVideo() {
        if (!this.testName) {
            return;
        }
        const formatSettings = getVideoFormatSettings(this.options.videoFormat);
        const videoPath = getVideoPath(__classPrivateFieldGet(this, _VideoReporter_outputDir, "f"), this.testName, formatSettings.fileExtension);
        this.videos.push(videoPath);
        process.emit('test:video-capture', videoPath);
        const frameCheckPromise = glob(`${this.recordingPath}/*.png`).then((frames) => {
            const insertionPromises = [];
            const insertMissing = (sourceFrame, targetFrame) => {
                const src = `${this.recordingPath}/${pad(sourceFrame)}.png`;
                const dest = `${this.recordingPath}/${pad(targetFrame)}.png`;
                __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `copying ${pad(sourceFrame)} to missing frame ${pad(targetFrame)}...`);
                insertionPromises.push(fsp.copyFile(src, dest));
            };
            if (frames.length) {
                const frameNumbers = frames.map((path) => +path.replace(FRAME_REGEX, '$1'));
                if (frameNumbers.length !== frameNumbers[frameNumbers.length - 1] - frameNumbers[0] + 1) {
                    let nextFrame;
                    let lastFrame;
                    for (let i = frameNumbers[0]; i < frameNumbers[frameNumbers.length - 1]; ++i) {
                        if (lastFrame && nextFrame && !frameNumbers.includes(i)) {
                            insertMissing(lastFrame, i);
                        }
                        else {
                            lastFrame = i;
                        }
                        nextFrame = i + 1;
                    }
                }
            }
            return Promise.all(insertionPromises);
        });
        const command = `"${path$1}"`;
        const args = [
            '-y',
            '-r', '10',
            '-i', `"${this.recordingPath}/%04d.png"`,
            '-vcodec', formatSettings.vcodec,
            '-crf', '32',
            '-pix_fmt', 'yuv420p',
            '-vf', `"scale=${this.options.videoScale}","setpts=${this.options.videoSlowdownMultiplier}.0*PTS"`,
            `"${videoPath}"`,
        ];
        __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `ffmpeg command: ${command} ${args.join(' ')}`);
        const start = Date.now();
        const promise = Promise
            .all(this.screenshotPromises)
            .then(() => frameCheckPromise)
            .then(() => new Promise((resolve) => {
            const cp = spawn(command, args, {
                stdio: 'ignore',
                shell: true,
                windowsHide: true,
            });
            cp.on('close', () => {
                __classPrivateFieldGet(this, _VideoReporter_instances, "m", _VideoReporter_log).call(this, `Generated video: "${videoPath}" (${Date.now() - start}ms)`);
                return resolve();
            });
        }));
        this.videoPromises.push(promise);
        return promise;
    }
}
_VideoReporter_outputDir = new WeakMap(), _VideoReporter_isDone = new WeakMap(), _VideoReporter_usingAllure = new WeakMap(), _VideoReporter_allureOutputDir = new WeakMap(), _VideoReporter_allureReporter = new WeakMap(), _VideoReporter_record = new WeakMap(), _VideoReporter_defaultOutputDir = new WeakMap(), _VideoReporter_instances = new WeakSet(), _VideoReporter_extendAllureReport = function _VideoReporter_extendAllureReport() {
    if (!__classPrivateFieldGet(this, _VideoReporter_usingAllure, "f")) {
        return;
    }
    const capabilities = getCurrentCapabilities(browser);
    const deviceName = capabilities['appium:deviceName'];
    if (deviceName) {
        __classPrivateFieldGet(this, _VideoReporter_allureReporter, "f").addArgument('deviceName', deviceName);
    }
    if (capabilities.browserVersion) {
        __classPrivateFieldGet(this, _VideoReporter_allureReporter, "f").addArgument('browserVersion', capabilities.browserVersion);
    }
}, _VideoReporter_setRecordingPath = function _VideoReporter_setRecordingPath() {
    const fullName = this.testNameStructure.slice(1)
        .reduce((cur, acc) => cur + '--' + acc, this.testNameStructure[0] || 'unknown');
    let browserName = 'browser';
    const capabilities = getCurrentCapabilities(browser);
    const deviceName = capabilities['appium:deviceName'];
    if (capabilities.browserName) {
        browserName = capabilities.browserName.toUpperCase();
    }
    else if (deviceName && capabilities.platformName) {
        browserName = `${deviceName.toUpperCase()}-${capabilities.platformName.toUpperCase()}`;
    }
    const testName = this.testName = generateFilename(this.options.maxTestNameCharacters, browserName, fullName);
    this.frameNr = 0;
    this.recordingPath = path.resolve(__classPrivateFieldGet(this, _VideoReporter_outputDir, "f") ?? this.options.outputDir, this.options.rawPath, testName);
    fs.mkdirSync(this.recordingPath, { recursive: true });
}, _VideoReporter_log = function _VideoReporter_log(...args) {
    this.write(`[${new Date().toISOString()}] ${args.join(' ')}\n`);
};

export { VideoReporter as default };
//# sourceMappingURL=wdio-video-reporter.mjs.map
