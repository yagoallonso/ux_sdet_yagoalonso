/// <reference types="node" resolution-mode="require"/>
import WdioReporter, { type RunnerStats, type AfterCommandArgs, type SuiteStats, type TestStats } from '@wdio/reporter';
import type { ReporterOptions } from './types.js';
export default class VideoReporter extends WdioReporter {
    #private;
    options: Required<ReporterOptions>;
    screenshotPromises: Promise<void>[];
    videos: string[];
    videoPromises: Promise<unknown>[];
    frameNr: number;
    intervalScreenshot?: NodeJS.Timeout;
    allureVideos: string[];
    recordingPath?: string;
    testNameStructure: string[];
    testName?: string;
    isCucumberFramework: boolean;
    constructor(options: ReporterOptions);
    get isSynchronised(): boolean;
    get outputDir(): string;
    get allureOutputDir(): string | undefined;
    get record(): boolean;
    set record(value: boolean);
    onRunnerStart(runner: RunnerStats): void;
    onBeforeCommand(): void;
    onAfterCommand(commandArgs: AfterCommandArgs): false | undefined;
    onSuiteStart(suite: SuiteStats): void;
    onSuiteEnd(suite: SuiteStats): void;
    onTestStart(suite: TestStats): void;
    onTestSkip(): void;
    onTestEnd(test: TestStats): void;
    onRunnerEnd(): void;
    onExit(): void;
    addFrame(): false | undefined;
    clearScreenshotInterval(): void;
    generateVideo(): Promise<void> | undefined;
}
//# sourceMappingURL=index.d.ts.map